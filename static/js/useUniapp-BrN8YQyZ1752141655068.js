import{T as n,B as t,C as a}from"./index-D3mIqR3u1752141655068.js";import{c4 as s,c5 as o,bU as i,c7 as e,cs as r}from"./chunk-vendor-LdhKlxOC1752141655068.js";import"./chunk-element-plus-D3hHamFS1752141655068.js";import"./chunk-vue-router-CukzgLuN1752141655068.js";import"./chunk-pinia-EHKNYQ4F1752141655068.js";import"./chunk-nprogress-DVqohuhc1752141655068.js";import"./chunk-axios-rSMZb3Ae1752141655068.js";const c={__name:"useUniapp",setup:c=>(c,l)=>(i(),s(n,{title:"接收二维码参数"},{default:o((()=>[e(t,{type:"info"},{default:o((()=>l[0]||(l[0]=[r(" 微信/支付宝小程序获取扫码参数和地址统一封装 ")]))),_:1,__:[0]}),e(a,{code:'\n    import MztUtils from "@/utils/mzt-utils";\n\n    class HandleFunc {\n      /**\n       * 获取微信、支付宝扫码参数并进行处理。\n       * 提取出 URL 后，会进一步解析出 query 参数对象，并通过回调返回。\n       *\n       * @param {Object} options - 小程序页面 onLoad(options) 中的参数对象。\n       * @param {Function} [callback] - 处理解析后参数的回调函数。\n       * @param {string} callback.url - 扫码跳转的完整 URL。\n       * @param {Object} callback.paramsObj - 从 URL 中解析出的参数对象（key-value）。\n       */\n      static scanParams(options, callback, failback = null) {\n        if (MztUtils.isEmpty(options)) {\n          return;\n        }\n        let url;\n        let paramsObj;\n        // #ifdef MP-ALIPAY\n        if (options.query && MztUtils.isNotEmpty(options.query.qrCode)) {\n          url = options.query.qrCode;\n        }\n        // #endif\n        // #ifdef MP-WEIXIN\n        if (MztUtils.isNotEmpty(options.q)) {\n          url = decodeURIComponent(options.q);\n        }\n        // #endif\n        if (MztUtils.isNotEmpty(url)) {\n          paramsObj = MztUtils.getQueryParams(url);\n          callback && callback(url, paramsObj)\n        }\n      }\n\n      /**\n       * 获取全局扫码参数\n       */\n      static getLaunchOptions() {\n        let options;\n        try {\n          // #ifdef MP-ALIPAY\n          options = my.getLaunchOptionsSync()\n          // #endif\n          // #ifdef MP-WEIXIN\n          options = wx.getLaunchOptionsSync()?.query;\n          // #endif\n          return options;\n        } catch (e) {\n          console.log("获取扫码参数错误")\n          return null;\n        }\n      }\n    }\n\n    export default HandleFunc\n\n    // 使用\n    const scan_options = HandleFunc.getLaunchOptions();\n    try {\n      HandleFunc.scanParams(scan_options, (url, obj) => {\n        // 扫码后续处理逻辑\n      });\n    } catch (e) {\n      uni.$u.toast("获取扫码数据失败");\n    }\n',language:"javascript"})])),_:1}))};export{c as default};
