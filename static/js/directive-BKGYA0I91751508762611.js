import{_ as n,T as a,o as e,B as t,C as i}from"./index-BHQvyort1751508762611.js";import{L as s}from"./LazyImageCard-Be2Kq8sz1751508762611.js";import{b as r,c as o}from"./centerLayout-CcAyI2hG1751508762611.js";import{a as l,l as c,r as p}from"./rightLayout-Di4nNjMC1751508762611.js";import{bT as d,c7 as m,c5 as g,c2 as u,bU as y,cc as v,cs as f,bw as L,bX as h,cB as x}from"./chunk-vendor-BhhAzIk91751508762611.js";import"./chunk-element-plus--t6lHgs01751508762611.js";import"./chunk-vue-router-CbuZ7lby1751508762611.js";import"./chunk-pinia-kGmvfEEM1751508762611.js";import"./chunk-nprogress-DVqohuhc1751508762611.js";import"./chunk-axios-rSMZb3Ae1751508762611.js";const z=""+new URL("../png/area-Bno7FBts.png",import.meta.url).href,j={class:"container"},C={class:"my-box"},k={class:"lazy-images-container"},_=n({__name:"directive",setup(n){const _=e;function b(n){}function w(n){}const I=[{src:z,alt:"区域图示例",description:"区域图示例 - 这张图片会立即加载，因为它在视口内"},{src:r,alt:"蓝色主题",description:"蓝色主题示例 - 向下滚动时会看到这张图片加载"},{src:l,alt:"红色主题",description:"红色主题示例 - 继续滚动观察加载效果"},{src:o,alt:"居中布局",description:"居中布局示例 - 滚动到这里时图片才会加载"},{src:c,alt:"左侧布局",description:"左侧布局示例 - 远离视口的图片不会立即加载"},{src:p,alt:"右侧布局",description:"右侧布局示例 - 只有滚动到这里才会加载"},{src:z,alt:"区域图示例(重复)",description:"区域图示例(重复) - 测试懒加载效果"},{src:r,alt:"蓝色主题(重复)",description:"蓝色主题示例(重复) - 测试懒加载效果"}];return(n,e)=>(y(),d(u,null,[m(a,{title:"给元素添加聚焦虚线边框"},{default:g((()=>[v((y(),d("div",j,[v((y(),d("div",C,e[0]||(e[0]=[f(" 鼠标悬停我或者点我 ")]))),[[L(_),{id:"my-box",onClick:b,onHover:w}]])])),[[L(_),{id:"my-contain",onClick:b,onHover:w}]])])),_:1}),m(a,{title:"图片懒加载指令"},{default:g((()=>[m(t,null,{default:g((()=>e[1]||(e[1]=[h("p",null,"使用 v-lazy 指令实现图片懒加载，提高页面性能",-1),h("p",null,"只有当图片进入视口时才会加载，减少初始页面加载时间",-1),h("p",null,"向下滚动页面，观察图片如何在进入视口时才加载",-1)]))),_:1,__:[1]}),h("div",k,[(y(),d(u,null,x(I,((n,a)=>m(s,{key:a,"image-src":n.src,"image-alt":n.alt,title:`图片 #${a+1}`,description:n.description,tags:[{text:`图片 ${a+1}`,type:a%2==0?"primary":"success"}],"image-height":a%3==0?"250px":"200px"},null,8,["image-src","image-alt","title","description","tags","image-height"]))),64))]),m(i,{code:'\n\x3c!-- 使用LazyImageCard组件 --\x3e\n<template>\n  <div class="lazy-images-container">\n    <LazyImageCard\n      v-for="(img, index) in imageList"\n      :key="index"\n      :image-src="img.src"\n      :image-alt="img.alt"\n      :title="`图片 #${index + 1}`"\n      :description="img.description"\n      :tags="[{ text: `图片 ${index + 1}`, type: index % 2 === 0 ? \'primary\' : \'success\' }]"\n    />\n  </div>\n</template>\n\n<script setup>\nimport LazyImageCard from "@/components/LazyImageCard.vue";\n\n// 图片列表数据\nconst imageList = [\n  {\n    src: \'/path/to/image1.jpg\',\n    alt: \'图片1描述\',\n    description: \'图片1说明\'\n  },\n  {\n    src: \'/path/to/image2.jpg\',\n    alt: \'图片2描述\',\n    description: \'图片2说明\'\n  }\n];\n<\/script>\n\n\x3c!-- LazyImageCard.vue 组件定义 --\x3e\n<template>\n  <CardViewer \n    :title="title" \n    :description="description" \n    :tags="tags" \n    :hoverable="hoverable"\n  >\n    <div class="lazy-image-wrapper">\n      <img v-lazy="imageSrc" :alt="imageAlt" class="lazy-image" />\n      <div class="loading-placeholder">\n        <slot name="loading">\n          <el-icon class="loading-icon"><Loading /></el-icon>\n          加载中...\n        </slot>\n      </div>\n    </div>\n    <slot></slot>\n  </CardViewer>\n</template>\n\n<script setup>\nimport { Loading } from \'@element-plus/icons-vue\';\nimport CardViewer from \'./CardViewer.vue\';\nimport lazyLoad from \'@/directives/lazyLoad.js\';\n\n// 局部注册懒加载指令\nconst vLazy = lazyLoad;\n\nconst props = defineProps({\n  // 图片路径\n  imageSrc: {\n    type: String,\n    required: true\n  },\n  // 图片替代文本\n  imageAlt: {\n    type: String,\n    default: \'\'\n  },\n  // 卡片标题\n  title: {\n    type: String,\n    default: \'\'\n  },\n  // 卡片描述\n  description: {\n    type: String,\n    default: \'\'\n  },\n  // 标签列表\n  tags: {\n    type: Array,\n    default: () => []\n  }\n});\n<\/script>\n',language:"html",lazyLoad:""})])),_:1})],64))}},[["__scopeId","data-v-64434242"]]);export{_ as default};
