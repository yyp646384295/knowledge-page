import{_ as e,B as n,T as t,C as o}from"./index-D3mIqR3u1752141655068.js";import{bT as s,bX as r,c7 as a,c5 as i,bU as l,cs as u}from"./chunk-vendor-LdhKlxOC1752141655068.js";import"./chunk-element-plus-D3hHamFS1752141655068.js";import"./chunk-vue-router-CukzgLuN1752141655068.js";import"./chunk-pinia-EHKNYQ4F1752141655068.js";import"./chunk-nprogress-DVqohuhc1752141655068.js";import"./chunk-axios-rSMZb3Ae1752141655068.js";const c={class:"lib-doc-container"},m=e(Object.assign({name:"PiniaUsage"},{__name:"usePinia",setup:e=>(e,m)=>(l(),s("div",c,[m[30]||(m[30]=r("h1",{class:"doc-title"},"Pinia 状态管理与持久化",-1)),a(n,{type:"info"},{default:i((()=>m[0]||(m[0]=[u(" 本文档记录了项目中 Pinia 状态管理库的使用方法和持久化配置，包含多种使用场景和最佳实践。 ")]))),_:1,__:[0]}),a(t,{title:"Pinia 基础介绍"},{default:i((()=>[m[1]||(m[1]=r("p",null,"Pinia 是 Vue 官方推荐的状态管理库，用于替代 Vuex。它具有以下特点：",-1)),m[2]||(m[2]=r("ul",null,[r("li",null,"完整的 TypeScript 支持"),r("li",null,"轻量级（约 1KB）"),r("li",null,"支持 Vue DevTools"),r("li",null,"可扩展的插件系统"),r("li",null,"支持服务端渲染")],-1)),a(o,{code:"// main.js 中 Pinia 的配置\nimport { createPinia } from 'pinia'\nimport piniaPluginPersistedstate from 'pinia-plugin-persistedstate'\n\nconst pinia = createPinia()\npinia.use(piniaPluginPersistedstate) // 使用持久化插件\n\napp.use(pinia)",language:"javascript",title:"项目中的 Pinia 配置"})])),_:1,__:[1,2]}),a(t,{title:"Store 定义方式"},{default:i((()=>[m[3]||(m[3]=r("h3",null,"2.1 选项式 API 定义 Store",-1)),m[4]||(m[4]=r("p",null,"使用选项式 API 定义 Store，适合复杂的状态管理场景：",-1)),a(o,{code:"// stores/modules/toc.store.js\nimport { defineStore } from \"pinia\";\n\nexport const useTocStore = defineStore(\"toc\", {\n  state: () => ({\n    tocList: [],\n    isVisible: true,\n    currentRoutePath: '',\n  }),\n  getters: {\n    shouldShowToc() {\n      return this.tocList.length > 0 || this.isLoading;\n    }\n  },\n  actions: {\n    addTocItem(item) {\n      if (!this.tocList.find(i => i.id === item.id)) {\n        this.tocList.push(item);\n      }\n    },\n    clearToc() {\n      this.tocList = [];\n    }\n  },\n  // 持久化配置 - 4.3.0版本的最新配置方式\n  persist: [\n    {\n      key: 'toc-store',\n      storage: localStorage,\n      pick: ['isVisible'] // 只持久化特定字段\n    }\n  ]\n});",language:"javascript",title:"选项式 API 定义 Store"}),m[5]||(m[5]=r("hr",null,null,-1)),m[6]||(m[6]=r("h3",null,"2.2 组合式 API 定义 Store",-1)),m[7]||(m[7]=r("p",null,"使用组合式 API 定义 Store，更接近 Vue 3 的组合式 API 风格：",-1)),a(o,{code:'// stores/modules/theme.store.js\nimport { defineStore } from "pinia";\nimport { reactive } from "vue";\n\nexport const useThemeStore = defineStore(\n  "theme",\n  () => {\n    // 状态定义\n    const themeConfig = reactive({\n      layout: "centerLayout",\n      theme: "redTheme",\n      fontSize: "normal"\n    });\n\n    // actions\n    const updateLayout = (layout) => {\n      themeConfig.layout = layout;\n    };\n\n    const updateTheme = (theme) => {\n      themeConfig.theme = theme;\n      // 更新DOM中的主题类\n      const body = document.body;\n      if (theme === "blueTheme") {\n        body.classList.add("theme-blue");\n        body.classList.remove("theme-default");\n      } else {\n        body.classList.add("theme-default");\n        body.classList.remove("theme-blue");\n      }\n    };\n\n    return {\n      themeConfig,\n      updateLayout,\n      updateTheme\n    };\n  },\n  {\n    // 持久化配置\n    persist: {\n      key: \'vue-vite-theme\',\n      storage: localStorage\n    }\n  }\n);',language:"javascript",title:"组合式 API 定义 Store"})])),_:1,__:[3,4,5,6,7]}),a(t,{title:"Store 使用方法"},{default:i((()=>[m[8]||(m[8]=r("h3",null,"3.1 在组件中使用 Store",-1)),a(o,{code:"// Vue 组件示例\n// template 部分\n// <template>\n//   <div>\n//     <p>当前主题: {{ themeStore.themeConfig.theme }}</p>\n//     <button @click=\"changeTheme\">切换主题</button>\n//   </div>\n// </template>\n\n// script 部分\nimport { useThemeStore } from '@/stores/modules/theme.store';\n\nconst themeStore = useThemeStore();\n\nfunction changeTheme() {\n  const newTheme = themeStore.themeConfig.theme === 'redTheme' ? 'blueTheme' : 'redTheme';\n  themeStore.updateTheme(newTheme);\n}\n// script end",language:"javascript",title:"在组件中使用 Store"}),m[9]||(m[9]=r("hr",null,null,-1)),m[10]||(m[10]=r("h3",null,"3.2 解构 Store 属性（使用 storeToRefs）",-1)),m[11]||(m[11]=r("p",null,[u("使用 "),r("code",null,"storeToRefs"),u(" 可以保持响应性的同时解构 store 属性：")],-1)),a(o,{code:"// 在组件中解构使用\nimport { useThemeStore } from '@/stores/modules/theme.store';\nimport { storeToRefs } from 'pinia';\n\nconst themeStore = useThemeStore();\n// 使用 storeToRefs 保持响应性\nconst { themeConfig } = storeToRefs(themeStore);\n// actions 可以直接解构\nconst { updateTheme } = themeStore;\n\nfunction changeTheme() {\n  const newTheme = themeConfig.value.theme === 'redTheme' ? 'blueTheme' : 'redTheme';\n  updateTheme(newTheme);\n}",language:"javascript",title:"解构 Store 属性"}),m[12]||(m[12]=r("hr",null,null,-1)),m[13]||(m[13]=r("h3",null,"3.3 在 Store 之间相互调用",-1)),a(o,{code:"import { defineStore } from 'pinia';\nimport { useThemeStore } from './theme.store';\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    preferences: {\n      theme: 'default'\n    }\n  }),\n  actions: {\n    // 在一个 store 中调用另一个 store 的 action\n    applyUserPreferences() {\n      const themeStore = useThemeStore();\n      themeStore.updateTheme(this.preferences.theme);\n    }\n  }\n});",language:"javascript",title:"Store 之间相互调用"})])),_:1,__:[8,9,10,11,12,13]}),a(t,{title:"Pinia 持久化配置"},{default:i((()=>[m[15]||(m[15]=r("h3",null,"4.1 基本持久化配置",-1)),m[16]||(m[16]=r("p",null,[u("使用 "),r("code",null,"pinia-plugin-persistedstate"),u(" 插件实现状态持久化：")],-1)),a(o,{code:"// 选项式 API 中的持久化配置\nexport const useCounterStore = defineStore('counter', {\n  state: () => ({ count: 0 }),\n  actions: {\n    increment() {\n      this.count++;\n    }\n  },\n  persist: true // 最简单的配置，持久化所有状态\n});\n\n// 组合式 API 中的持久化配置\nexport const useUserStore = defineStore('user', \n  () => {\n    const user = ref(null);\n    const setUser = (newUser) => {\n      user.value = newUser;\n    };\n    \n    return { user, setUser };\n  },\n  {\n    persist: true // 最简单的配置，持久化所有状态\n  }\n);",language:"javascript",title:"基本持久化配置"}),m[17]||(m[17]=r("hr",null,null,-1)),m[18]||(m[18]=r("h3",null,"4.2 自定义持久化配置",-1)),a(n,{type:"warning"},{default:i((()=>m[14]||(m[14]=[u(" 注意：在 pinia-plugin-persistedstate 4.3.0 版本中，选择要持久化的字段应使用 "),r("code",null,"pick",-1),u(" 而不是 "),r("code",null,"paths",-1),u("。 使用错误的属性名可能导致整个 state 被持久化，而不是只持久化指定字段。 ")]))),_:1,__:[14]}),a(o,{code:"export const useAdvancedStore = defineStore('advanced', {\n  state: () => ({\n    user: null,\n    token: null,\n    settings: {\n      theme: 'light',\n      notifications: true\n    },\n    tempData: [] // 临时数据，不需要持久化\n  }),\n  persist: {\n    // 自定义存储键名\n    key: 'my-custom-key',\n    \n    // 使用 sessionStorage 而非默认的 localStorage\n    storage: sessionStorage,\n    \n    // 只持久化特定字段的数据（4.3.0版本使用pick而不是paths）\n    pick: ['user', 'token', 'settings.theme'],\n    \n    // 自定义序列化/反序列化\n    serializer: {\n      deserialize: JSON.parse,\n      serialize: JSON.stringify\n    },\n    \n    // 持久化前的数据转换\n    beforeRestore: (context) => {\n      console.log('即将恢复数据', context);\n    },\n    \n    // 持久化后的回调\n    afterRestore: (context) => {\n      console.log('数据已恢复', context);\n    }\n  }\n});",language:"javascript",title:"自定义持久化配置"}),m[19]||(m[19]=r("hr",null,null,-1)),m[20]||(m[20]=r("h3",null,"4.3 多策略持久化",-1)),m[21]||(m[21]=r("p",null,"可以为不同的数据配置不同的持久化策略：",-1)),m[22]||(m[22]=r("p",null,[u("在 4.3.0 版本中，多策略配置使用数组形式直接定义，而不是通过 "),r("code",null,"strategies"),u(" 属性：")],-1)),a(o,{code:"\n  export const useMultiStore = defineStore('multi', {\n    state: () => ({\n      user: null,\n      token: null,\n      preferences: {\n        theme: 'light',\n        fontSize: 'medium'\n      },\n      cachedData: {}\n    }),\n    // 4.3.0版本使用数组形式定义多策略\n    persist: [\n      // 敏感数据使用 sessionStorage，关闭浏览器后清除\n      {\n        key: 'auth-data',\n        storage: sessionStorage,\n        pick: ['token', 'user']\n      },\n      // 用户偏好使用 localStorage 长期保存\n      {\n        key: 'user-preferences',\n        storage: localStorage,\n        pick: ['preferences']\n      },\n      // 缓存数据使用自定义存储\n      {\n        key: 'cached-data',\n        storage: {\n          getItem: (key) => {\n            // 从 IndexedDB 或其他存储获取数据\n            return localStorage.getItem(key);\n          },\n          setItem: (key, value) => {\n            // 存储到 IndexedDB 或其他存储\n            localStorage.setItem(key, value);\n          }\n        },\n        pick: ['cachedData']\n      }\n    ]\n  });\n",language:"javascript",title:"多策略持久化"})])),_:1,__:[15,16,17,18,19,20,21,22]}),a(t,{title:"最佳实践"},{default:i((()=>[m[23]||(m[23]=r("h3",null,"5.1 模块化组织 Store",-1)),a(o,{code:"// stores/index.js\nconst modules = import.meta.glob('./modules/*.store.js', {eager: true})\n\n// 将所有导出的 useXXXStore 统一导出\nconst stores = {}\n\nfor (const path in modules) {\n    const mod = modules[path]\n    for (const key in mod) {\n        stores[key] = mod[key]\n    }\n}\n\nexport default stores",language:"javascript",title:"模块化组织 Store"}),m[24]||(m[24]=r("hr",null,null,-1)),m[25]||(m[25]=r("h3",null,"5.2 使用 $reset 方法重置状态",-1)),a(o,{code:"// 在组件中重置 store 状态\nconst userStore = useUserStore();\n\nfunction logout() {\n  userStore.$reset(); // 重置为初始状态\n  router.push('/login');\n}",language:"javascript",title:"重置状态"}),m[26]||(m[26]=r("hr",null,null,-1)),m[27]||(m[27]=r("h3",null,"5.3 使用 $patch 批量更新状态",-1)),a(o,{code:"const userStore = useUserStore();\n\n// 批量更新多个状态\nuserStore.$patch({\n  name: 'John',\n  age: 30,\n  preferences: {\n    theme: 'dark'\n  }\n});\n\n// 或者使用函数形式进行更复杂的更新\nuserStore.$patch((state) => {\n  state.name = 'John';\n  state.age = 30;\n  state.lastLogin = new Date();\n  state.loginCount++;\n});",language:"javascript",title:"批量更新状态"}),m[28]||(m[28]=r("hr",null,null,-1)),m[29]||(m[29]=r("h3",null,"5.4 订阅状态变化",-1)),a(o,{code:"const userStore = useUserStore();\n\n// 订阅整个 store 的变化\nconst unsubscribe = userStore.$subscribe((mutation, state) => {\n  // 每次状态变化时触发\n  console.log('状态变化:', mutation);\n  console.log('当前状态:', state);\n  \n  // 可以在这里执行额外的操作，如同步到服务器\n  saveToLocalStorage('user-state', state);\n}, { detached: true }); // detached: true 表示组件卸载后依然保持订阅\n\n// 在需要时取消订阅\nonUnmounted(() => {\n  unsubscribe();\n});",language:"javascript",title:"订阅状态变化"})])),_:1,__:[23,24,25,26,27,28,29]})]))}),[["__scopeId","data-v-ef250ac9"]]);export{m as default};
