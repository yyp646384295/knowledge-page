import{aa as t,S as n}from"./chunk-element-plus-uuGlhcV-1751510987578.js";import{_ as e,T as i,B as a,V as s,C as o}from"./index-Brqv2r8y1751510987578.js";import{bu as l,bF as r,c4 as c,c5 as m,bU as p,c7 as d,bX as u,c9 as f,c3 as h,cs as v}from"./chunk-vendor-C4y4kqPh1751510987578.js";import"./chunk-vue-router-ELZkRXBe1751510987578.js";import"./chunk-pinia-DyUIvQ2z1751510987578.js";import"./chunk-nprogress-DVqohuhc1751510987578.js";import"./chunk-axios-rSMZb3Ae1751510987578.js";const g={class:"demo-section"},x={class:"demo-container"},b={class:"list-item"},y={class:"item-id"},M={class:"item-title"},L={class:"item-desc"},w={class:"demo-section"},z={class:"demo-container"},_={class:"item-header"},$={class:"item-title"},k={class:"item-content"},T={class:"item-footer"},j={class:"item-time"},D=e(Object.assign({name:"CustomComponents"},{__name:"custom",setup(e){const D=l([]),V=l([]),C=t=>({active:"活跃",inactive:"不活跃",pending:"待处理"}[t]||t);return r((()=>{D.value=((t=1e3)=>{const n=[];for(let e=1;e<=t;e++)n.push({id:e,title:`标题 ${e}`,desc:`这是第 ${e} 项的描述信息`});return n})(),V.value=((t=100)=>{const n=["active","inactive","pending"],e=[];for(let i=1;i<=t;i++){const t=n[Math.floor(Math.random()*n.length)],a=Math.random()>.7;e.push({id:i,title:`项目 ${i}`,content:`这是一个${a?"重要":"普通"}的项目内容，当前状态为 ${C(t)}`,status:t,important:a,createTime:`2023-${Math.floor(12*Math.random())+1}-${Math.floor(28*Math.random())+1}`})}return e})()})),(e,l)=>{const r=t,S=n;return p(),c(i,{title:"虚拟列表"},{default:m((()=>[d(a,null,{default:m((()=>l[0]||(l[0]=[u("p",null,"虚拟列表是一种优化大数据渲染的技术，只渲染可视区域内的数据项，适用于大量数据展示场景",-1),u("p",null,"特点：高性能、低内存占用、滚动流畅",-1)]))),_:1,__:[0]}),u("div",g,[l[1]||(l[1]=u("h3",null,"基础用法",-1)),u("div",x,[d(s,{"list-data":D.value,height:300,"item-size":50,"buffer-size":5},{default:m((({item:t})=>[u("div",b,[u("span",y,f(t.id),1),u("span",M,f(t.title),1),u("span",L,f(t.desc),1)])])),_:1},8,["list-data"])]),d(o,{code:'\n<template>\n  \x3c!-- 基础虚拟列表使用示例 --\x3e\n  <VirtualList \n    :list-data="listData" \n    :height="300" \n    :item-size="50"\n    :buffer-size="5"\n  >\n    <template #default="{ item }">\n      <div class="list-item">\n        <span class="item-id">{{ item.id }}</span>\n        <span class="item-title">{{ item.title }}</span>\n        <span class="item-desc">{{ item.desc }}</span>\n      </div>\n    </template>\n  </VirtualList>\n</template>\n\n<script setup>\nimport { ref, onMounted } from \'vue\';\nimport VirtualList from \'@/components/VirtualList.vue\';\n\n// 列表数据\nconst listData = ref([]);\n\n// 生成列表数据\nconst generateListData = (count = 1000) => {\n  const data = [];\n  for (let i = 1; i <= count; i++) {\n    data.push({\n      id: i,\n      title: `标题 ${i}`,\n      desc: `这是第 ${i} 项的描述信息`\n    });\n  }\n  return data;\n};\n\n// 组件挂载时初始化数据\nonMounted(() => {\n  listData.value = generateListData();\n});\n<\/script>\n\n<style scoped>\n.list-item {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n.item-id {\n  width: 50px;\n  font-weight: bold;\n}\n\n.item-title {\n  flex: 1;\n  font-size: 16px;\n}\n\n.item-desc {\n  color: #999;\n  margin-left: 20px;\n}\n</style>\n',lazyLoad:""})]),u("div",w,[l[4]||(l[4]=u("h3",null,"自定义样式",-1)),u("div",z,[d(s,{"list-data":V.value,height:400,"item-size":100},{default:m((({item:t})=>{return[u("div",{class:h(["custom-item",{important:t.important}])},[u("div",_,[u("span",$,f(t.title),1),d(r,{size:"small",type:(n=t.status,{active:"success",inactive:"info",pending:"warning"}[n]||"info")},{default:m((()=>[v(f(C(t.status)),1)])),_:2},1032,["type"])]),u("div",k,f(t.content),1),u("div",T,[u("span",j,[l[2]||(l[2]=u("i",{class:"el-icon-time"},null,-1)),v(" "+f(t.createTime),1)]),d(S,{type:"primary",size:"small",link:""},{default:m((()=>l[3]||(l[3]=[v("查看详情")]))),_:1,__:[3]})])],2)];var n})),_:1},8,["list-data"])]),d(o,{code:"\n<template>\n  \x3c!-- 自定义样式虚拟列表 --\x3e\n  <VirtualList \n    :list-data=\"customListData\" \n    :height=\"400\" \n    :item-size=\"100\"\n  >\n    <template #default=\"{ item }\">\n      <div class=\"custom-item\" :class=\"{ 'important': item.important }\">\n        <div class=\"item-header\">\n          <span class=\"item-title\">{{ item.title }}</span>\n          <el-tag size=\"small\" :type=\"getTagType(item.status)\">\n            {{ getStatusText(item.status) }}\n          </el-tag>\n        </div>\n        <div class=\"item-content\">{{ item.content }}</div>\n        <div class=\"item-footer\">\n          <span class=\"item-time\"><i class=\"el-icon-time\"></i> {{ item.createTime }}</span>\n          <el-button type=\"primary\" size=\"small\" link>查看详情</el-button>\n        </div>\n      </div>\n    </template>\n  </VirtualList>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport VirtualList from '@/components/VirtualList.vue';\n\n// 自定义样式列表数据\nconst customListData = ref([]);\n\n// 生成自定义样式列表数据\nconst generateCustomListData = (count = 100) => {\n  const statusList = ['active', 'inactive', 'pending'];\n  const data = [];\n  \n  for (let i = 1; i <= count; i++) {\n    const status = statusList[Math.floor(Math.random() * statusList.length)];\n    const important = Math.random() > 0.7;\n    \n    data.push({\n      id: i,\n      title: `项目 ${i}`,\n      content: `这是一个${important ? '重要' : '普通'}的项目内容，当前状态为 ${getStatusText(status)}`,\n      status: status,\n      important: important,\n      createTime: `2023-${Math.floor(Math.random() * 12) + 1}-${Math.floor(Math.random() * 28) + 1}`\n    });\n  }\n  \n  return data;\n};\n\n// 获取状态文本\nconst getStatusText = (status) => {\n  const statusMap = {\n    'active': '活跃',\n    'inactive': '不活跃',\n    'pending': '待处理'\n  };\n  return statusMap[status] || status;\n};\n\n// 获取标签类型\nconst getTagType = (status) => {\n  const typeMap = {\n    'active': 'success',\n    'inactive': 'info',\n    'pending': 'warning'\n  };\n  return typeMap[status] || 'info';\n};\n\n// 组件挂载时初始化数据\nonMounted(() => {\n  customListData.value = generateCustomListData();\n});\n<\/script>\n\n<style scoped>\n.custom-item {\n  padding: 10px 15px;\n  border-radius: 6px;\n  background-color: var(--el-bg-color-overlay);\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  transition: all 0.3s ease;\n  overflow: hidden; /* 防止内容溢出 */\n  \n  &.important {\n    background-color: var(--el-color-primary-light-9);\n    border-left: 3px solid var(--el-color-primary);\n  }\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.09);\n  }\n}\n\n.item-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n}\n\n.item-title {\n  font-weight: bold;\n  font-size: 16px;\n  color: var(--el-text-color-primary);\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 70%;\n}\n\n.item-content {\n  flex: 1;\n  color: var(--el-text-color-regular);\n  margin-bottom: 8px;\n  line-height: 1.4;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.item-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 12px;\n  color: var(--el-text-color-secondary);\n  padding-top: 6px;\n  border-top: 1px dashed var(--el-border-color-lighter);\n  margin-top: auto; /* 将footer推到底部 */\n}\n\n.item-time {\n  display: flex;\n  align-items: center;\n}\n\n.item-time i {\n  margin-right: 4px;\n}\n</style>\n",lazyLoad:""})])])),_:1})}}}),[["__scopeId","data-v-73895a0f"]]);export{D as default};
